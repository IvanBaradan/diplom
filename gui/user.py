# gui/user.py

import tkinter as tk
import random

from tkinter import ttk, messagebox
from services import tour_service, order_service, review_service, pdf_generator
from gui import shared
from PIL import Image, ImageTk
import io
from services import review_service, tour_service


class UserMenu(ttk.Frame):
    def __init__(self, app, user, theme_config, fonts):
        super().__init__(app.root)
        self.app = app
        self.user = user
        self.theme_config = theme_config
        self.fonts = fonts
        self.pack(fill=tk.BOTH, expand=True)
        self.create_menu()

    def create_menu(self):
        ttk.Label(self, text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {self.user['full_name']}!",
                  font=self.fonts['title'], foreground=self.theme_config['primary']).pack(pady=30)

        btn_frame = ttk.Frame(self)
        btn_frame.pack(pady=20)

        actions = [
            ("üîç –ü–æ–∏—Å–∫ —Ç—É—Ä–æ–≤", self.show_all_tours),
            ("üìå –ú–æ–∏ –±—Ä–æ–Ω–∏", self.view_my_bookings),
            ("üõí –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏", self.view_my_purchases),
            ("‚Ü© –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç", self.view_my_refunds),
            ("‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", self.leave_review),
            ("üö™ –í—ã–π—Ç–∏", self.app.logout),
        ]

        for i, (text, command) in enumerate(actions):
            btn = ttk.Button(btn_frame, text=text, command=command, style='Primary.TButton')
            btn.grid(row=i, column=0, pady=5, ipadx=30, sticky='ew')

    def show_all_tours(self):
        window = tk.Toplevel(self)
        window.title("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—É—Ä—ã")

        tours = tour_service.get_all_tours()
        if not tours:
            messagebox.showinfo("–ù–µ—Ç —Ç—É—Ä–æ–≤", "–¢—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        tree = ttk.Treeview(window, columns=("ID", "–°—Ç—Ä–∞–Ω–∞", "–ì–æ—Ä–æ–¥", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–¶–µ–Ω–∞", "–ú–µ—Å—Ç"), show='headings')
        tree.pack(fill=tk.BOTH, expand=True)

        for col in tree["columns"]:
            tree.heading(col, text=col)

        for tour in tours:
            tree.insert("", tk.END, values=(tour[0], tour[1], tour[2], tour[3], tour[4], tour[8]))

        def on_select(event):
            selected = tree.focus()
            if selected:
                values = tree.item(selected)['values']
                self.book_or_buy_popup(values[0], values[3])

        tree.bind("<Double-1>", on_select)

    def book_or_buy_popup(self, tour_id, tour_name):
        tour = tour_service.get_tour_by_id(tour_id)
        if not tour:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        popup = tk.Toplevel(self)
        popup.title("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–µ")
        popup.geometry("600x600")

        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—É—Ä–∞
        if tour[9]:
            try:
                image_data = tour[9]
                image = Image.open(io.BytesIO(image_data))
                image.thumbnail((300, 200))
                img = ImageTk.PhotoImage(image)
                img_label = ttk.Label(popup, image=img)
                img_label.image = img
                img_label.pack(pady=10)
            except Exception as e:
                ttk.Label(popup, text=f"–û—à–∏–±–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}").pack()
        else:
            ttk.Label(popup, text="–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç—É—Ä–∞").pack(pady=5)

        # –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –¥–µ—Ç–∞–ª–∏
        ttk.Label(popup, text=tour[3], font=self.fonts['subtitle']).pack()
        ttk.Label(popup, text=f"{tour[1]}, {tour[2]}", font=self.fonts['normal']).pack()
        ttk.Label(popup, text=f"{tour[5]} - {tour[6]} | {tour[4]} —Ä—É–±.", font=self.fonts['normal']).pack(pady=5)

        # –û–ø–∏—Å–∞–Ω–∏–µ
        ttk.Label(popup, text="–û–ø–∏—Å–∞–Ω–∏–µ:", font=self.fonts['bold']).pack(anchor='w', padx=10)
        desc = tk.Text(popup, height=5, wrap='word')
        desc.insert(tk.END, tour[7])
        desc.configure(state='disabled')
        desc.pack(fill=tk.X, padx=10)

        # –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
        rating = review_service.get_average_rating(tour_id)
        ttk.Label(popup, text=f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating if rating else '–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫'}").pack(pady=5)

        # –û—Ç–∑—ã–≤—ã
        reviews = review_service.get_reviews_for_tour(tour_id)
        if reviews:
            ttk.Label(popup, text="–û—Ç–∑—ã–≤—ã:", font=self.fonts['bold']).pack(anchor='w', padx=10)
            for rate, comment, user in reviews:
                ttk.Label(popup, text=f"{user}: {rate}/5 ‚Äî {comment}", wraplength=500, justify='left').pack(anchor='w', padx=15)
        else:
            ttk.Label(popup, text="–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤", font=self.fonts['small']).pack()

        # –ö–Ω–æ–ø–∫–∏
        ttk.Button(popup, text="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", command=lambda: self.book(tour_id, popup),
                style='Secondary.TButton').pack(pady=5)
        ttk.Button(popup, text="–ö—É–ø–∏—Ç—å", command=lambda: self.purchase(tour_id, popup),
                style='Primary.TButton').pack(pady=5)

    def book(self, tour_id, popup):
        order_service.book_tour(self.user['id'], tour_id)
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–¢—É—Ä –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω.")
        popup.destroy()

    def purchase(self, tour_id, popup):
        order_service.purchase_tour(self.user['id'], tour_id)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —á–µ–∫–∞
        tour = tour_service.get_tour_by_id(tour_id)
        tour_name = tour[3]
        price = tour[4]
        username = self.user['username']
        order_id = random.randint(10000, 99999)  # –í –∏–¥–µ–∞–ª–µ ‚Äî –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π ID –∑–∞–∫–∞–∑–∞

        path = pdf_generator.generate_pdf_receipt(order_id, tour_name, username, price)
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"–¢—É—Ä –∫—É–ø–ª–µ–Ω.\n–ß–µ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n{path}")
        popup.destroy()

    def view_my_bookings(self):
        self._show_orders_by_status(["booked"], "–ú–æ–∏ –±—Ä–æ–Ω–∏")

    def view_my_purchases(self):
        self._show_orders_by_status(["purchased"], "–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏")

    def view_my_refunds(self):
        self._show_orders_by_status(["refund_requested", "cancelled"], "–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç")

    def _show_orders_by_status(self, statuses, title):
        orders = order_service.get_orders_by_user_and_status(self.user['id'], statuses)
        if not orders:
            messagebox.showinfo("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", f"{title} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        win = tk.Toplevel(self)
        win.title(title)

        tree = ttk.Treeview(win, columns=("ID", "–¢—É—Ä", "–°—Ç–∞—Ç—É—Å", "–î–∞—Ç–∞"), show='headings')
        tree.pack(fill=tk.BOTH, expand=True)

        for col in tree["columns"]:
            tree.heading(col, text=col)

        for order in orders:
            tree.insert("", tk.END, values=(order[0], order[1], order[2], order[3]))

    def leave_review(self):
        win = tk.Toplevel(self)
        win.title("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")

        ttk.Label(win, text="ID —Ç—É—Ä–∞:").pack()
        tour_id_entry = ttk.Entry(win)
        tour_id_entry.pack()

        ttk.Label(win, text="–û—Ü–µ–Ω–∫–∞ (1-5):").pack()
        rating_entry = ttk.Entry(win)
        rating_entry.pack()

        ttk.Label(win, text="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:").pack()
        comment_entry = ttk.Entry(win)
        comment_entry.pack()

        def submit():
            try:
                tour_id = int(tour_id_entry.get())
                rating = int(rating_entry.get())
                comment = comment_entry.get()
                review_service.add_review(self.user['id'], tour_id, rating, comment)
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
                win.destroy()
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ: {e}")

        ttk.Button(win, text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", command=submit, style='Primary.TButton').pack(pady=10)
