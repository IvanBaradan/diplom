# gui/admin.py

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from services import tour_service, order_service, review_service, validators
from gui import shared
from PIL import Image, ImageTk

class AdminMenu(ttk.Frame):
    def __init__(self, master, theme_config, fonts):
        super().__init__(master)
        self.master = master
        self.theme_config = theme_config
        self.fonts = fonts
        self.tour_image_data = None
        self.pack(fill=tk.BOTH, expand=True)
        self.create_menu()

    def create_menu(self):
        ttk.Label(self, text="–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                  font=self.fonts['title'], foreground=self.theme_config['primary']).pack(pady=30)

        btn_frame = ttk.Frame(self)
        btn_frame.pack(pady=10)

        actions = [
            ("üì¶ –î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä", self.add_tour_window),
            ("üß≠ –í—Å–µ —Ç—É—Ä—ã", self.view_all_tours),
            ("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", self.view_all_users),
            ("üí¨ –û—Ç–∑—ã–≤—ã", self.view_all_reviews),
            ("‚Ü© –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç", self.view_all_refunds),
        ]

        for i, (text, command) in enumerate(actions):
            btn = ttk.Button(btn_frame, text=text, command=command, style='Primary.TButton')
            btn.grid(row=i, column=0, pady=6, ipadx=40, sticky='ew')

    def add_tour_window(self):
        win = tk.Toplevel(self)
        win.title("–î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä")

        fields = {}
        labels = {
            'country': '–°—Ç—Ä–∞–Ω–∞',
            'city': '–ì–æ—Ä–æ–¥',
            'name': '–ù–∞–∑–≤–∞–Ω–∏–µ',
            'price': '–¶–µ–Ω–∞',
            'date_start': '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (YYYY-MM-DD)',
            'date_end': '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (YYYY-MM-DD)',
            'description': '–û–ø–∏—Å–∞–Ω–∏–µ',
            'seats': '–ö–æ–ª-–≤–æ –º–µ—Å—Ç'
        }
        
        # –ú–∞—Å–∫–∞ –¥–∞—Ç—ã
        # fields['date_start'].bind("<FocusOut>", lambda e: fields['date_start'].delete(0, tk.END) or fields['date_start'].insert(0, validators.format_date_input(fields['date_start'].get())))
        # fields['date_end'].bind("<FocusOut>", lambda e: fields['date_end'].delete(0, tk.END) or fields['date_end'].insert(0, validators.format_date_input(fields['date_end'].get())))


        for i, (key, label) in enumerate(labels.items()):
            ttk.Label(win, text=label + ":").grid(row=i, column=0, sticky='e', padx=5, pady=5)
            entry = ttk.Entry(win)
            entry.grid(row=i, column=1, padx=5, pady=5)
            fields[key] = entry

        image_btn = ttk.Button(win, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", command=lambda: self.load_image(win))
        image_btn.grid(row=len(labels), column=0, columnspan=2, pady=10)

        ttk.Button(win, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=lambda: self.save_tour(fields, win),
                   style='Success.TButton').grid(row=len(labels) + 1, column=0, columnspan=2, pady=10)

    def load_image(self, parent):
        file_path = filedialog.askopenfilename(filetypes=[("Image files", "*.png *.jpg *.jpeg")])
        if file_path:
            with open(file_path, 'rb') as f:
                self.tour_image_data = f.read()

            img = Image.open(file_path)
            img.thumbnail((200, 200))
            photo = ImageTk.PhotoImage(img)

            label = tk.Label(parent, image=photo)
            label.image = photo
            label.grid(column=0, columnspan=2)

    def save_tour(self, fields, win):
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç
        if not validators.is_valid_date(data['date_start']) or not validators.is_valid_date(data['date_end']):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD.")
            return
        
        try:
            data = {key: f.get() for key, f in fields.items()}
            data['price'] = float(data['price'])
            data['seats'] = int(data['seats'])
            data['image'] = self.tour_image_data
            tour_service.add_tour(data)
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–¢—É—Ä –¥–æ–±–∞–≤–ª–µ–Ω.")
            win.destroy()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {e}")

    def view_all_tours(self):
        self._view_table("–í—Å–µ —Ç—É—Ä—ã", tour_service.get_all_tours(), ("ID", "–°—Ç—Ä–∞–Ω–∞", "–ì–æ—Ä–æ–¥", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–¶–µ–Ω–∞", "–î–∞—Ç–∞ –æ—Ç", "–î–∞—Ç–∞ –¥–æ", "–û–ø–∏—Å–∞–Ω–∏–µ", "–ú–µ—Å—Ç"))

    def view_all_users(self):
        from database import get_connection
        conn = get_connection()
        cur = conn.cursor()
        cur.execute("SELECT id, username, full_name, phone, role FROM users")
        users = cur.fetchall()
        conn.close()
        self._view_table("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", users, ("ID", "–õ–æ–≥–∏–Ω", "–§–ò–û", "–¢–µ–ª–µ—Ñ–æ–Ω", "–†–æ–ª—å"))

    def view_all_reviews(self):
        from database import get_connection
        conn = get_connection()
        cur = conn.cursor()
        cur.execute("SELECT id, user_id, tour_id, rating, comment FROM orders WHERE rating IS NOT NULL")
        reviews = cur.fetchall()
        conn.close()
        self._view_table("–û—Ç–∑—ã–≤—ã", reviews, ("ID", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–¢—É—Ä", "–û—Ü–µ–Ω–∫–∞", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"))

    def view_all_refunds(self):
        from database import get_connection
        conn = get_connection()
        cur = conn.cursor()
        cur.execute("SELECT id, user_id, tour_id, status FROM orders WHERE status = 'refund_requested'")
        refunds = cur.fetchall()

        win = tk.Toplevel(self)
        win.title("–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç")

        tree = ttk.Treeview(win, columns=("ID", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–¢—É—Ä", "–°—Ç–∞—Ç—É—Å"), show='headings')
        tree.pack(fill=tk.BOTH, expand=True)

        for col in tree["columns"]:
            tree.heading(col, text=col)

        for row in refunds:
            tree.insert("", tk.END, values=row)

        def approve():
            selected = tree.focus()
            if selected:
                order_id = tree.item(selected)['values'][0]
                order_service.approve_refund(order_id)
                messagebox.showinfo("–£—Å–ø–µ—à–Ω–æ", "–í–æ–∑–≤—Ä–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
                win.destroy()

        ttk.Button(win, text="–û–¥–æ–±—Ä–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç", command=approve, style='Success.TButton').pack(pady=10)

    def _view_table(self, title, rows, columns):
        win = tk.Toplevel(self)
        win.title(title)

        tree = ttk.Treeview(win, columns=columns, show='headings')
        tree.pack(fill=tk.BOTH, expand=True)

        for col in columns:
            tree.heading(col, text=col)

        for row in rows:
            tree.insert("", tk.END, values=row)
