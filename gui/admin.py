# gui/admin.py

import tkinter as tk
import re

from tkinter import ttk, messagebox, filedialog
from services import tour_service, order_service, review_service, validators
from gui import shared
from PIL import Image, ImageTk

class AdminMenu(ttk.Frame):
    def __init__(self, app, theme_config, fonts):
        super().__init__(app.root)
        self.app = app
        self.theme_config = theme_config
        self.fonts = fonts
        self.tour_image_data = None
        self.pack(fill=tk.BOTH, expand=True)
        self.create_menu()

    def create_menu(self):
        ttk.Label(self, text="–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                  font=self.fonts['title'], foreground=self.theme_config['primary']).pack(pady=30)

        btn_frame = ttk.Frame(self)
        btn_frame.pack(pady=10)

        actions = [
            ("üì¶ –î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä", self.add_tour_window),
            ("üß≠ –í—Å–µ —Ç—É—Ä—ã", self.view_all_tours),
            ("‚Ü© –í–æ–∑–≤—Ä–∞—Ç—ã", self.manage_refunds),
            ("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", self.view_all_users),
            ("üí¨ –û—Ç–∑—ã–≤—ã", self.view_all_reviews),
            ("üö™ –í—ã–π—Ç–∏", self.app.logout),
        ]

        for i, (text, command) in enumerate(actions):
            btn = ttk.Button(btn_frame, text=text, command=command, style='Primary.TButton')
            btn.grid(row=i, column=0, pady=6, ipadx=40, sticky='ew')

    def add_tour_window(self):
        win = tk.Toplevel(self)
        win.title("–î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä")

        fields = {}
        labels = {
            'country': '–°—Ç—Ä–∞–Ω–∞',
            'city': '–ì–æ—Ä–æ–¥',
            'name': '–ù–∞–∑–≤–∞–Ω–∏–µ',
            'price': '–¶–µ–Ω–∞',
            'date_start': '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (YYYY-MM-DD)',
            'date_end': '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (YYYY-MM-DD)',
            'description': '–û–ø–∏—Å–∞–Ω–∏–µ',
            'seats': '–ö–æ–ª-–≤–æ –º–µ—Å—Ç'
        }
        
        # –ú–∞—Å–∫–∞ –¥–∞—Ç—ã
        self.date_start_var = tk.StringVar()
        self.date_end_var = tk.StringVar()

        fields['date_start'] = ttk.Entry(win, textvariable=self.date_start_var)
        fields['date_end'] = ttk.Entry(win, textvariable=self.date_end_var)

        fields['date_start'].grid(row=4, column=1, padx=5, pady=5)
        fields['date_end'].grid(row=5, column=1, padx=5, pady=5)

        self.date_start_var.trace_add('write', self.on_date_change)
        self.date_end_var.trace_add('write', self.on_date_change)
        

        for i, (key, label) in enumerate(labels.items()):
            ttk.Label(win, text=label + ":").grid(row=i, column=0, sticky='e', padx=5, pady=5)
            entry = ttk.Entry(win)
            entry.grid(row=i, column=1, padx=5, pady=5)
            fields[key] = entry

        image_btn = ttk.Button(win, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", command=lambda: self.load_image(win))
        image_btn.grid(row=len(labels), column=0, columnspan=2, pady=10)

        ttk.Button(win, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=lambda: self.save_tour(fields, win),
                   style='Success.TButton').grid(row=len(labels) + 1, column=0, columnspan=2, pady=10)
        
    def on_date_change(self, *_):
        for var in [self.date_start_var, self.date_end_var]:
            text = re.sub(r'\D', '', var.get())
            if len(text) > 8:
                text = text[:8]
            if len(text) >= 8:
                formatted = f"{text[:4]}-{text[4:6]}-{text[6:]}"
            elif len(text) >= 6:
                formatted = f"{text[:4]}-{text[4:6]}"
            elif len(text) >= 4:
                formatted = f"{text[:4]}"
            else:
                formatted = text
            var.set(formatted)

    def load_image(self, parent):
        file_path = filedialog.askopenfilename(filetypes=[("Image files", "*.png *.jpg *.jpeg")])
        if file_path:
            with open(file_path, 'rb') as f:
                self.tour_image_data = f.read()

            img = Image.open(file_path)
            img.thumbnail((200, 200))
            photo = ImageTk.PhotoImage(img)

            label = tk.Label(parent, image=photo)
            label.image = photo
            label.grid(column=0, columnspan=2)

    def save_tour(self, fields, win):
        try:
            data = {key: f.get() for key, f in fields.items()}
            data['price'] = float(data['price'])
            data['seats'] = int(data['seats'])
            data['image'] = self.tour_image_data
            
            tour_service.add_tour(data)
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–¢—É—Ä –¥–æ–±–∞–≤–ª–µ–Ω.")
            win.destroy()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {e}")

    def view_all_tours(self):
        tours = tour_service.get_all_tours()
        if not tours:
            messagebox.showinfo("–ù–µ—Ç —Ç—É—Ä–æ–≤", "–°–ø–∏—Å–æ–∫ —Ç—É—Ä–æ–≤ –ø—É—Å—Ç.")
            return

        win = tk.Toplevel(self)
        win.title("–í—Å–µ —Ç—É—Ä—ã")

        tree = ttk.Treeview(win, columns=("ID", "–°—Ç—Ä–∞–Ω–∞", "–ì–æ—Ä–æ–¥", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–¶–µ–Ω–∞", "–î–∞—Ç–∞ –æ—Ç", "–î–∞—Ç–∞ –¥–æ", "–û–ø–∏—Å–∞–Ω–∏–µ", "–ú–µ—Å—Ç"), show="headings")
        tree.pack(fill=tk.BOTH, expand=True)

        for col in tree["columns"]:
            tree.heading(col, text=col)
        for row in tours:
            tree.insert("", tk.END, values=row)

        def delete_selected():
            selected = tree.focus()
            if selected:
                tour_id = tree.item(selected)['values'][0]
                if messagebox.askyesno("–£–¥–∞–ª–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å —Ç—É—Ä?"):
                    tour_service.delete_tour(tour_id)
                    tree.delete(selected)

        def edit_selected():
            selected = tree.focus()
            if selected:
                values = tree.item(selected)['values']
                self.edit_tour_window(values)

        btn_frame = ttk.Frame(win)
        btn_frame.pack(pady=10)

        ttk.Button(btn_frame, text="–£–¥–∞–ª–∏—Ç—å —Ç—É—Ä", command=delete_selected, style='Danger.TButton').pack(side=tk.LEFT, padx=10)
        ttk.Button(btn_frame, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä", command=edit_selected, style='Secondary.TButton').pack(side=tk.LEFT, padx=10)

    def edit_tour_window(self, tour_values):
        win = tk.Toplevel(self)
        win.title("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä")
        keys = ["country", "city", "name", "price", "date_start", "date_end", "description", "seats"]
        fields = {}

        self.edited_image_data = tour_values[9] if len(tour_values) > 9 else None  # —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

        for i, key in enumerate(keys):
            ttk.Label(win, text=key.capitalize()).grid(row=i, column=0, sticky="e", padx=5, pady=3)
            ent = ttk.Entry(win)
            ent.grid(row=i, column=1, padx=5, pady=3)
            ent.insert(0, str(tour_values[i + 1]))  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ID
            fields[key] = ent

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        def load_image():
            from tkinter import filedialog
            path = filedialog.askopenfilename(filetypes=[("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.jpg *.png *.jpeg *.gif")])
            if path:
                with open(path, 'rb') as f:
                    self.edited_image_data = f.read()
                ttk.Label(win, text="‚úÖ –ö–∞—Ä—Ç–∏–Ω–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞").grid(row=len(keys), column=1, sticky='w', padx=5)

        ttk.Button(win, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", command=load_image).grid(row=len(keys), column=0, columnspan=2, pady=10)

        def save_changes():
            try:
                data = {k: f.get() for k, f in fields.items()}
                data["price"] = float(data["price"])
                data["seats"] = int(data["seats"])
                data["id"] = tour_values[0]
                data["image"] = self.edited_image_data  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
                tour_service.update_tour(data)
                messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–¢—É—Ä –æ–±–Ω–æ–≤–ª—ë–Ω")
                win.destroy()
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

        ttk.Button(win, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", command=save_changes, style='Success.TButton').grid(row=len(keys)+1, column=0, columnspan=2, pady=10)


    def view_all_users(self):
        from database import get_connection
        conn = get_connection()
        cur = conn.cursor()
        cur.execute("SELECT id, username, full_name, phone, role FROM users")
        users = cur.fetchall()
        conn.close()

        win = tk.Toplevel(self)
        win.title("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")

        tree = ttk.Treeview(win, columns=("ID", "–õ–æ–≥–∏–Ω", "–§–ò–û", "–¢–µ–ª–µ—Ñ–æ–Ω", "–†–æ–ª—å"), show='headings')
        tree.pack(fill=tk.BOTH, expand=True)

        for col in tree["columns"]:
            tree.heading(col, text=col)
        for row in users:
            tree.insert("", tk.END, values=row)

        def delete_user():
            selected = tree.focus()
            if selected:
                user_id = tree.item(selected)['values'][0]
                if messagebox.askyesno("–£–¥–∞–ª–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?"):
                    from services import auth_service
                    auth_service.delete_user(user_id)
                    tree.delete(selected)

        ttk.Button(win, text="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", command=delete_user, style='Danger.TButton').pack(pady=10)


    def view_all_reviews(self):
        from database import get_connection
        conn = get_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT o.id, u.username, t.name, o.rating, o.comment 
            FROM orders o
            JOIN users u ON o.user_id = u.id
            JOIN tours t ON o.tour_id = t.id
            WHERE o.rating IS NOT NULL
        """)
        reviews = cur.fetchall()
        conn.close()

        win = tk.Toplevel(self)
        win.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞–º–∏")
        win.geometry("900x500")

        # –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(win, style='Card.TFrame')
        header_frame.pack(fill=tk.X, padx=10, pady=10)
        ttk.Label(header_frame, text="–í—Å–µ –æ—Ç–∑—ã–≤—ã", font=self.fonts['subtitle'], 
                foreground=self.theme_config['primary']).pack(pady=5)

        # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        main_frame = ttk.Frame(win)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

        # –¢–∞–±–ª–∏—Ü–∞ —Å –æ—Ç–∑—ã–≤–∞–º–∏
        columns = ("ID", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–¢—É—Ä", "–û—Ü–µ–Ω–∫–∞", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
        tree = ttk.Treeview(main_frame, columns=columns, show='headings', selectmode='browse')

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        tree.heading("ID", text="ID", anchor=tk.W)
        tree.heading("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", anchor=tk.W)
        tree.heading("–¢—É—Ä", text="–¢—É—Ä", anchor=tk.W)
        tree.heading("–û—Ü–µ–Ω–∫–∞", text="–û—Ü–µ–Ω–∫–∞", anchor=tk.W)
        tree.heading("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", text="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", anchor=tk.W)

        tree.column("ID", width=50, minwidth=50)
        tree.column("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", width=150, minwidth=100)
        tree.column("–¢—É—Ä", width=200, minwidth=150)
        tree.column("–û—Ü–µ–Ω–∫–∞", width=80, minwidth=60)
        tree.column("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", width=400, minwidth=200)

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        for review in reviews:
            rating = f"{review[3]}/5" if review[3] else "–ë–µ–∑ –æ—Ü–µ–Ω–∫–∏"
            comment = review[4] if review[4] else "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
            tree.insert("", tk.END, values=(
                review[0],  # ID –æ—Ç–∑—ã–≤–∞
                review[1],  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                review[2],  # –¢—É—Ä
                rating,     # –û—Ü–µ–Ω–∫–∞
                comment     # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            ))

        # –ü–æ–ª–æ—Å–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scrollbar = ttk.Scrollbar(main_frame, orient=tk.VERTICAL, command=tree.yview)
        tree.configure(yscroll=scrollbar.set)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        tree.pack(fill=tk.BOTH, expand=True)

        # –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
        def delete_review():
            selected = tree.focus()
            if not selected:
                messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∑—ã–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                return
            
            review_id = tree.item(selected)['values'][0]
            if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–∑—ã–≤?"):
                try:
                    conn = get_connection()
                    cur = conn.cursor()
                    cur.execute("UPDATE orders SET rating=NULL, comment=NULL WHERE id=?", (review_id,))
                    conn.commit()
                    conn.close()
                    tree.delete(selected)
                    messagebox.showinfo("–£—Å–ø–µ—Ö", "–û—Ç–∑—ã–≤ —É–¥–∞–ª–µ–Ω")
                except Exception as e:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤: {e}")

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        action_frame = ttk.Frame(win)
        action_frame.pack(fill=tk.X, padx=10, pady=10)

        ttk.Button(action_frame, text="–£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤", 
                command=delete_review,
                style='Danger.TButton').pack(side=tk.LEFT, padx=5)

        ttk.Button(action_frame, text="–ó–∞–∫—Ä—ã—Ç—å", 
                command=win.destroy,
                style='Secondary.TButton').pack(side=tk.RIGHT, padx=5)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞
        def show_full_review(event):
            selected = tree.focus()
            if selected:
                values = tree.item(selected)['values']
                messagebox.showinfo("–ü–æ–ª–Ω—ã–π –æ—Ç–∑—ã–≤", 
                                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {values[1]}\n–¢—É—Ä: {values[2]}\n–û—Ü–µ–Ω–∫–∞: {values[3]}\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n{values[4]}")

        tree.bind("<Double-1>", show_full_review)

    def view_all_refunds(self):
        from database import get_connection
        conn = get_connection()
        cur = conn.cursor()
        cur.execute("SELECT id, user_id, tour_id, status FROM orders WHERE status = 'refund_requested'")
        refunds = cur.fetchall()

        win = tk.Toplevel(self)
        win.title("–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç")

        tree = ttk.Treeview(win, columns=("ID", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–¢—É—Ä", "–°—Ç–∞—Ç—É—Å"), show='headings')
        tree.pack(fill=tk.BOTH, expand=True)

        for col in tree["columns"]:
            tree.heading(col, text=col)

        for row in refunds:
            tree.insert("", tk.END, values=row)

        def approve():
            selected = tree.focus()
            if selected:
                order_id = tree.item(selected)['values'][0]
                order_service.approve_refund(order_id)
                messagebox.showinfo("–£—Å–ø–µ—à–Ω–æ", "–í–æ–∑–≤—Ä–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
                win.destroy()

        ttk.Button(win, text="–û–¥–æ–±—Ä–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç", command=approve, style='Success.TButton').pack(pady=10)

    def _view_table(self, title, rows, columns):
        win = tk.Toplevel(self)
        win.title(title)

        tree = ttk.Treeview(win, columns=columns, show='headings')
        tree.pack(fill=tk.BOTH, expand=True)

        for col in columns:
            tree.heading(col, text=col)

        for row in rows:
            tree.insert("", tk.END, values=row)
    
    def manage_refunds(self):
        orders = order_service.get_orders_with_status('refund_requested')
        if not orders:
            messagebox.showinfo("–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤", "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç.")
            return

        win = tk.Toplevel(self)
        win.title("–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç")

        tree = ttk.Treeview(win, columns=("ID", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–¢—É—Ä"), show='headings')
        tree.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        for col in tree["columns"]:
            tree.heading(col, text=col)

        for row in orders:
            tree.insert("", tk.END, values=row)

        def approve():
            selected = tree.focus()
            if not selected:
                return
            order_id = tree.item(selected)['values'][0]
            order_service.approve_refund(order_id)
            messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–í–æ–∑–≤—Ä–∞—Ç –æ–¥–æ–±—Ä–µ–Ω")
            tree.delete(selected)

        def reject():
            selected = tree.focus()
            if not selected:
                return
            order_id = tree.item(selected)['values'][0]
            order_service.reject_refund(order_id)
            messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–í–æ–∑–≤—Ä–∞—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω")
            tree.delete(selected)

        # üîß –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π Frame
        btn_frame = ttk.Frame(win)
        btn_frame.pack(pady=10)

        ttk.Button(btn_frame, text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", command=approve).pack(side=tk.LEFT, padx=10)
        ttk.Button(btn_frame, text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", command=reject).pack(side=tk.LEFT, padx=10)
